{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"osm-login-python","text":"<p>Package to manage OAuth 2.0 login for OSM in Python.</p> <p>\ud83d\udcd6 Documentation</p> <p></p> <p></p>"},{"location":"#install-with-pip","title":"Install with pip","text":"<pre><code>pip install osm-login-python\n</code></pre>"},{"location":"#import-auth-and-initialize-class-with-your-credentials","title":"Import Auth and initialize class with your credentials","text":"<pre><code>from osm_login_python.core import Auth\n</code></pre> <pre><code>osm_auth=Auth(\n    osm_url=YOUR_OSM_URL,\n    client_id=YOUR_OSM_CLIENT_ID,\n    client_secret=YOUR_OSM_CLIENT_SECRET,\n    secret_key=YOUR_OSM_SECRET_KEY,\n    login_redirect_uri=YOUR_OSM_LOGIN_REDIRECT_URI,\n    scope=YOUR_OSM_SCOPE_LIST,\n)\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Three functions are provided:</p> <ol> <li> <p>login() -- Returns the login url for OSM.</p> </li> <li> <p>The user must then access this URL and authorize the OAuth application      to login.</p> </li> <li>The user will be redirected to the configured <code>login_redirect_uri</code> after      successful login with OSM.</li> <li> <p>The web page must then call the <code>callback()</code> function below, sending the      current URL to the function (which includes the OAuth authorization code).</p> </li> <li> <p>callback() -- Returns the encoded and serialized data:</p> </li> <li> <p><code>user_data</code> a JSON of OSM user data.</p> </li> <li><code>oauth_token</code> a string OSM OAuth token.</li> <li> <p>Both are encoded and serialized as an additional safety measure when used      in URLs.</p> </li> <li> <p>deserialize_data() -- returns decoded and deserialized data from <code>callback()</code>.</p> </li> </ol> <p>[!NOTE] This package is primarily intended to return OSM user data.</p> <p>It is also possible to obtain the <code>oauth_token</code> as described above, for making authenticated requests against the OSM API from within a secure backend service.</p> <p>To use the OAuth token in a frontend please use caution and adhere to best practice security, such as embedding in a secure httpOnly cookie (do not store in localStorage, sessionStorage, or unsecure cookies).</p>"},{"location":"#example","title":"Example","text":"<p>In Django:</p> <pre><code>import json\nfrom django.conf import settings\nfrom osm_login_python.core import Auth\nfrom django.http import JsonResponse\n\n# initialize osm_auth with our credentials\nosm_auth = Auth(\n    osm_url=YOUR_OSM_URL,\n    client_id=YOUR_OSM_CLIENT_ID,\n    client_secret=YOUR_OSM_CLIENT_SECRET,\n    secret_key=YOUR_OSM_SECRET_KEY,\n    login_redirect_uri=YOUR_OSM_LOGIN_REDIRECT_URI,\n    scope=YOUR_OSM_SCOPE,\n)\n\ndef login(request):\n    login_url = osm_auth.login()\n    return JsonResponse(login_url)\n\ndef callback(request):\n    # Generating token through osm_auth library method\n    token = osm_auth.callback(request.build_absolute_uri())\n    return JsonResponse(token)\n\ndef get_my_data(request, serialized_user_data: str):\n    user_data = osm_auth.deserialize_data(serialized_user_data)\n    return JsonResponse(user_data)\n</code></pre> <ul> <li> <p>Django integration example here   https://github.com/hotosm/fAIr/tree/master/backend/login</p> </li> <li> <p>FastAPI integration example here   https://github.com/hotosm/export-tool-api/tree/develop/API/auth</p> </li> </ul>"},{"location":"#version-control","title":"Version Control","text":"<p>Use commitizen for version control.</p>"},{"location":"#test-coverage","title":"Test Coverage","text":"<p>Generate a coverage badge:</p> <pre><code>pdm install\npdm run coverage run -m pytest\n# pdm run coverage report\npdm run coverage coverage-badge -o docs/coverage.svg\n</code></pre>"},{"location":"#contribute","title":"Contribute","text":"<p>Contributions are welcome!</p>"},{"location":"api/core/","title":"core.py","text":"<p>Main class for OSM login.</p> Source code in <code>osm_login_python/core.py</code> <pre><code>def __init__(self, osm_url, client_id, client_secret, secret_key, login_redirect_uri, scope):\n    \"\"\"Set object params and get OAuth2 session.\"\"\"\n    # Strip trailing slash so our URL forming works\n    if osm_url.endswith(\"/\"):\n        osm_url = osm_url.rstrip(\"/\")\n\n    self.osm_url = osm_url\n    self.client_secret = client_secret\n    self.secret_key = secret_key\n    self.oauth = OAuth2Session(\n        client_id,\n        redirect_uri=login_redirect_uri,\n        scope=scope,\n    )\n</code></pre> <p>options: show_source: false heading_level: 3</p>"},{"location":"api/core/#osm_login_python.core.Auth.login","title":"login","text":"<pre><code>login()\n</code></pre> <p>Generate login URL from OSM session.</p> <p>Provides a login URL using the session created by osm client id and redirect uri supplied.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>{'login_url': 'URL'}</p> Source code in <code>osm_login_python/core.py</code> <pre><code>def login(\n    self,\n) -&gt; dict:\n    \"\"\"Generate login URL from OSM session.\n\n    Provides a login URL using the session created by osm\n    client id and redirect uri supplied.\n\n    Returns:\n        dict: {'login_url': 'URL'}\n    \"\"\"\n    authorize_url = f\"{self.osm_url}/oauth2/authorize/\"\n    login_url, _ = self.oauth.authorization_url(authorize_url)\n    return json.loads(Login(login_url=login_url).model_dump_json())\n</code></pre>"},{"location":"api/core/#osm_login_python.core.Auth.callback","title":"callback","text":"<pre><code>callback(callback_url)\n</code></pre> <p>Performs token exchange between OSM and the callback website.</p> <p>The returned data will be individually serialized and encoded, so it can only be used from within the same module.</p> <p>The returned dictionary / JSON will contain: - <code>user_data</code>, containing OSM user details. - <code>oauth_token</code>, containing the OSM OAuth token for API calls.</p> <p>To use these values, we must run them through the <code>deserialize_data</code> function to deserialize and decode the data using the <code>secret_key</code> variable set.</p> <p>NOTE 'oauth_token' should not be stored in a frontend and can be discarded if not required. It could, however, be stored in a secure httpOnly cookie in the frontend if required, for subsequent API calls.</p> <p>Parameters:</p> Name Type Description Default <code>callback_url(str)</code> <p>Absolute URL should be passed which is returned from login_redirect_uri.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The encoded user details and encoded OSM access token.</p> Source code in <code>osm_login_python/core.py</code> <pre><code>def callback(self, callback_url: str) -&gt; dict:\n    \"\"\"Performs token exchange between OSM and the callback website.\n\n    The returned data will be individually serialized and encoded, so it can\n    only be used from within the same module.\n\n    The returned dictionary / JSON will contain:\n    - `user_data`, containing OSM user details.\n    - `oauth_token`, containing the OSM OAuth token for API calls.\n\n    To use these values, we must run them through the `deserialize_data`\n    function to deserialize and decode the data using the `secret_key`\n    variable set.\n\n    NOTE 'oauth_token' should not be stored in a frontend and can be discarded\n    if not required. It could, however, be stored in a secure httpOnly cookie\n    in the frontend if required, for subsequent API calls.\n\n    Args:\n        callback_url(str): Absolute URL should be passed which\n            is returned from login_redirect_uri.\n\n    Returns:\n        dict: The encoded user details and encoded OSM access token.\n    \"\"\"\n    token_url = f\"{self.osm_url}/oauth2/token\"\n    token = self.oauth.fetch_token(\n        token_url,\n        authorization_response=callback_url,\n        client_secret=self.client_secret,\n    )\n    # NOTE this is the actual token for the OSM API\n    osm_access_token = token.get(\"access_token\")\n\n    user_api_url = f\"{self.osm_url}/api/0.6/user/details.json\"\n    # NOTE the osm token is included automatically in requests from self.oauth\n    resp = self.oauth.get(user_api_url)\n    if resp.status_code != 200:\n        raise ValueError(\"Invalid response from OSM\")\n    data = resp.json().get(\"user\")\n    user_data = {\n        \"id\": data.get(\"id\"),\n        \"username\": data.get(\"display_name\"),\n        \"img_url\": data.get(\"img\").get(\"href\") if data.get(\"img\") else None,\n    }\n\n    encoded_user_data = self._serialize_encode_data(user_data)\n    encoded_osm_token = self._serialize_encode_data(osm_access_token)\n\n    # The actual response from this endpoint {\"user_data\": xxx, \"oauth_token\": xxx}\n    token = Token(user_data=encoded_user_data, oauth_token=encoded_osm_token)\n    return token.model_dump()\n</code></pre>"},{"location":"api/core/#osm_login_python.core.Auth.deserialize_data","title":"deserialize_data","text":"<pre><code>deserialize_data(data)\n</code></pre> <p>Returns the userdata as JSON from access token.</p> <p>Can be used for login required decorator or to check the access token provided.</p> <p>Parameters:</p> Name Type Description Default <code>data(str)</code> <p>The user_data or oauth_token from Auth.callback()</p> required <p>Returns:</p> Name Type Description <code>deserialized_data</code> <code>dict</code> <p>A deserialized JSON data.</p> Source code in <code>osm_login_python/core.py</code> <pre><code>def deserialize_data(self, data: str) -&gt; dict:\n    \"\"\"Returns the userdata as JSON from access token.\n\n    Can be used for login required decorator or to check\n    the access token provided.\n\n    Args:\n        data(str): The user_data or oauth_token from Auth.callback()\n\n    Returns:\n        deserialized_data(dict): A deserialized JSON data.\n    \"\"\"\n    deserializer = URLSafeSerializer(self.secret_key)\n\n    try:\n        decoded_data = base64.b64decode(data)\n    except Exception as e:\n        log.error(e)\n        log.error(f\"Could not decode token: {data}\")\n        raise ValueError(\"Could not decode token\") from e\n\n    try:\n        deserialized_data = deserializer.loads(decoded_data)\n    except (SignatureExpired, BadSignature) as e:\n        log.error(e)\n        raise ValueError(\"Auth token is invalid or expired\") from e\n\n    return deserialized_data\n</code></pre>"}]}